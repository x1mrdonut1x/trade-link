generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model contact {
  id          Int      @id @unique @default(autoincrement())
  firstName   String
  lastName    String
  jobTitle    String?
  phonePrefix String?
  phoneNumber String?
  email       String   @unique
  address     String?
  city        String?
  country     String?
  postCode    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     company? @relation(fields: [companyId], references: [id])
  companyId   Int?
  notes       note[]
  todos       todo[]
}

model company {
  id               Int                @id @unique @default(autoincrement())
  name             String             @unique
  email            String?            @unique
  description      String?
  phonePrefix      String?
  phoneNumber      String?
  address          String?
  city             String?
  country          String?
  postCode         String?
  size             String?
  website          String?
  extraInfo        Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  company_type_tag company_type_tag[]
  contact          contact[]
  notes            note[]
  todos            todo[]
}

model company_type_tag {
  id        Int      @id @unique @default(autoincrement())
  name      String
  company   company? @relation(fields: [companyId], references: [id])
  companyId Int?
}

model note {
  id          Int      @id @unique @default(autoincrement())
  title       String
  description String?
  contactId   Int?
  companyId   Int?
  createdBy   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  contact     contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  company     company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user        user     @relation(fields: [createdBy], references: [id])
}

model todo {
  id           Int      @id @unique @default(autoincrement())
  title        String
  description  String?
  reminderDate DateTime
  resolved     Boolean  @default(false)
  contactId    Int?
  companyId    Int?
  createdBy    Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  contact      contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  company      company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user         user     @relation(fields: [createdBy], references: [id])
}

model user {
  id         Int          @id @unique @default(autoincrement())
  email      String       @unique
  firstName  String
  lastName   String
  password   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  note       note[]
  todos      todo[]
  membership membership[]
}

model tenant {
  id         Int          @id @unique @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  membership membership[]
}

model membership {
  id        Int      @id @unique @default(autoincrement())
  tenant    tenant   @relation(fields: [tenantId], references: [id])
  user      user     @relation(fields: [userId], references: [id])
  tenantId  Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
