generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model contact {
  id          Int      @id @unique @default(autoincrement())
  firstName   String
  lastName    String
  jobTitle    String?
  phonePrefix String?
  phoneNumber String?
  email       String
  address     String?
  city        String?
  country     String?
  postCode    String?
  tenantId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     company? @relation(fields: [companyId], references: [id])
  companyId   Int?
  tenant      tenant   @relation(fields: [tenantId], references: [id])
  notes       note[]
  tasks       task[]
  tags        tag[]    @relation("contactTags")

  @@unique([email, tenantId])
}

model company {
  id          Int       @id @unique @default(autoincrement())
  name        String
  email       String?
  description String?
  phonePrefix String?
  phoneNumber String?
  address     String?
  city        String?
  country     String?
  postCode    String?
  size        String?
  website     String?
  extraInfo   Json?
  tenantId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tenant      tenant    @relation(fields: [tenantId], references: [id])
  tags        tag[]     @relation("companyTags")
  contact     contact[]
  notes       note[]
  tasks       task[]

  @@unique([name, tenantId])
  @@unique([email, tenantId])
}

model tag {
  id        Int       @id @unique @default(autoincrement())
  name      String
  color     String
  tenantId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      user      @relation(fields: [createdBy], references: [id])
  createdBy Int
  tenant    tenant    @relation(fields: [tenantId], references: [id])
  contacts  contact[] @relation("contactTags")
  companies company[] @relation("companyTags")

  @@unique([name, tenantId])
}

model note {
  id          Int      @id @unique @default(autoincrement())
  title       String
  description String?
  contactId   Int?
  companyId   Int?
  createdBy   Int
  tenantId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  contact     contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  company     company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user        user     @relation(fields: [createdBy], references: [id])
  tenant      tenant   @relation(fields: [tenantId], references: [id])
}

model task {
  id           Int       @id @unique @default(autoincrement())
  title        String
  description  String?
  reminderDate DateTime? @db.Date
  resolved     Boolean   @default(false)
  contactId    Int?
  companyId    Int?
  createdBy    Int
  tenantId     Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  contact      contact?  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  company      company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user         user      @relation(fields: [createdBy], references: [id])
  tenant       tenant    @relation(fields: [tenantId], references: [id])
}

model user {
  id           Int          @id @unique @default(autoincrement())
  email        String       @unique
  firstName    String
  lastName     String
  password     String
  refreshToken String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  note         note[]
  tasks        task[]
  membership   membership[]
  tag          tag[]
}

model tenant {
  id         Int          @id @unique @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  membership membership[]
  contacts   contact[]
  companies  company[]
  tags       tag[]
  notes      note[]
  tasks      task[]
}

model membership {
  id        Int      @id @unique @default(autoincrement())
  tenant    tenant   @relation(fields: [tenantId], references: [id])
  user      user     @relation(fields: [userId], references: [id])
  tenantId  Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
